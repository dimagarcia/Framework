DECLARE
    tbWeightedAdjacencyMatrix pkBayesianMapper.tytbRow;
    nuI integer;
    nuJ integer;
    nuWeight number;
    numNodes number := 6;

--------------------------------------------------------------------------------
-- loadOptimalNetworks
    Procedure Initialize IS
    BEGIN
    	-- Inizializate cardianality of values sets for each variable
    	pkBayesianMapper.tbR(1) := 3; pkBayesianMapper.tbR(2) := 3;
    	pkBayesianMapper.tbR(3) := 3; pkBayesianMapper.tbR(4) := 3;
    	pkBayesianMapper.tbR(5) := 3;  pkBayesianMapper.tbR(6) := 3;
    	/*pkBayesianMapper.tbR(7) := 3; pkBayesianMapper.tbR(8) := 3;
    	pkBayesianMapper.tbR(9) := 3;*/

    	
        -- Clear power matrix table
        DELETE FROM power_matrix
            WHERE pomapow > 0;

        -- Initialization power one
        FOR i IN 1 .. pkBayesianMapper.tbR.COUNT
        LOOP
         FOR j IN 1 .. pkBayesianMapper.tbR.COUNT
         LOOP
            INSERT INTO POWER_MATRIX
                 VALUES (1,
                         i,
                         j,
                         0);
         END LOOP;
        END LOOP;

        -- Commit
        COMMIT;
      
    END Initialize;
    Procedure loadOptimalNetworks IS
    BEGIN
        pkBNBinaryRepresentation.tbBNBR.delete;
        -- Maltose
        /*
        pkBNBinaryRepresentation.tbBNBR('000000000100000000110111010110000000110101010110100000111111010110101000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000100000000110111010110000000110101010110100000111111011110101000111111010') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000100000001110110011110000001110100001111110111111110011110110001100000000') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000100100001110110011100000001110100001111110111111110011110110001100000000') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000100100001110110011100000001110100011111110111111110011110100001100000000') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000100110100110111111100010000100000000110110100100110000110111101110111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101000000100000000111001100111101111111000000111001000111101100111101110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101000000100000000111001100111101111111000100111000000111101100111101110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101011010100010010111011011100000010101010010111111011100000000111011010') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101011010100011010111011011100000010100010010111111011100000000111011010') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101011100100001000111011100101001000100000000101011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101011100100011000111011100100001000100000000101011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101111110100011000101011110100001000100000000101011000101011100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101111111100011000101011100100001000100000000101011000101111100101111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000000000101111111100011000101011110100001000100000000101011000101011100101111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101011110100001000111011110101001000000000000101011000101011100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111110100001000101011110101001000000000000101011000101011100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111110100011000101011100100001000000000000101011000101111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111110100011000101011110100001000000000000101011000101011100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111110100011100101011100100001000000000000100011000101111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111110100011100101011100100001100000000000100001000101111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111110100111100100011100100001000000000000100011000101111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111110100111100100011100100001100000000000100001000101111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111111100001000101011110101001000000000000101011000101011100101111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111111100011000101011100100001000000000000101011000101111100101111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111111100011100101011100100001000000000000100011000101111100101111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000001000101111111100011100101011100100001100000000000100001000101111100101111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000010000101010010100010000111010010000000000111110110111110010101010000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('000010000101010010100010010111010010000000000111110110111110010100010000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('001000000101000000000000000111001100111101101111000000111001000111111101111101100') := 1;
        pkBNBinaryRepresentation.tbBNBR('001000000101000000000000000111001100111101111111000000111001000111101100111101110') := 1;
        pkBNBinaryRepresentation.tbBNBR('001000000101000000000000000111001100111101111111000000111001000111101101111101100') := 1;
        pkBNBinaryRepresentation.tbBNBR('001001000101111111000001000101011110101001000000000000101011000101011100101111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('001011100101111111000010000101011100000000000001010100001010000101111101101111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('010000000000000000110111010110000000110101010110100000111111011110101000111111010') := 1;
        pkBNBinaryRepresentation.tbBNBR('010001000000000000110111010110001000110101010010000000111111010110101000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010001000000000000110111010110001000110101010010000000111111011110101000111111010') := 1;
        pkBNBinaryRepresentation.tbBNBR('010100000000000000110111010010000000110101010110100000111111010110101000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010100000000000000110111010010000000110101010110100000111111011110101000111111010') := 1;
        pkBNBinaryRepresentation.tbBNBR('010101000000000000110111010010000000110101010010100000111111010110101000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010101000000000000110111010010001000110101010010000000111111010110101000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111000000010000110111111010011000000000000010010000110111010110111000110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111010000000000110111111010011000010000000010010000110111010010111000110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111010000000000110111111010011010010000000010010000110111010010011000110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111010000010000110111111010011000000000000010010000110111010010111000110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000000000110111110010010100010000000010110100010010000110111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000000000110111111010010100010000000010110100010010000110111100110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000000000110111111010010100010000100010110100010000000110111100110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000000000110111111010011100010000000010010000010011000110111100110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000000000110111111010011100010000000010010100010010000110111100110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000000000110111111010011100010000100010010100010000000110111100110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000010000110111110010010100000000000010110100010010000110111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000010000110111111010010100000000000010110100010010000110111100110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('010111100000010000110111111010011100000000000010010000010011000110111100110111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011000000000000000010000000111001101111101101111000000111001000111111101111001100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011000000000000000010000000111001101111101101111000100111000000111111101111001100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011000000000000000010000000111011101111001101111000100111000000111111101111001100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011001100000001100010001100111001111111101111000000000000001000111001101111001100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000000000010000000111011110011000000011010000011011000111011100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000000000010010000111011100010000000011010000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000000000010010000111011100010000000011010000011011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000000000010010000111011110010000000011010000011011000111011100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000000000010011000111011100010000000010010000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000000000010011000111011100010001000010000000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000010000010010000111011100000000000011010000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000010000010010000111011100000000000011010000011011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100000010000010011000111011100000000000010010000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100001000000000000000111011100011000000011010000011011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100001011000000000000111011100001001000001000000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011100001011000000000000111011110001001000001000000011011000111011100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000000000010000000111011101011001000011000000011011000111111101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000000000010000000111011111011001000011000000011011000111011101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000000000010001000111011101011001000010000000011011000111111101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000000000010001000111011101011001000010000000011011001111111101011011000') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000001000010001000111011101011001000000000000011011000111111101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000001000010011000111011101010001000000000000011011000111111101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000001000010011100111011101010001000000000000010011000111111101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101000001000010011100111011111010001000000000000010011000111011101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101001000000000000000111011101011000000011010000011011000111111101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101001000000000000000111011101011001000011000000011011000111111101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011101001000000000000000111011111011001000011000000011011000111011101011011100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011011110000000100010011110111011111010000100010010100000000000010011100111011110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001000000000000000011011100011000000011010000011011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001000000000000000011011100011000000011010100011010000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001010000000000000011011100001000000011010000011011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001010000000000000011011100001000000011010100011010000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001010000000010000011011100000000000011010000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001010000000010000011011100000000000011010000011011000111111101111111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001011000000000000011011100001001000001000000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111100001011000000010000011011100000000000001010000011011000111111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111101000000000010000000011011100011001000011000000011011000111111101011111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111110000011000010011110011011110000001000000000000010011010010011000111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111110001011000000000000011011100001000000001010000011011000011111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111110001011000000000000011011100001001000001000000011011000011111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111110001011000000010000011011100000000000001010000011011000011111100111111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111111000000000010000000011011100011000000011010000011011000011111101011111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111111000000000010000000011011100011001000011000000011011000011111101011111100') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111111000011000010011110011011110000001000000000000010011010010011000011111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111111000011000010111010010011000000001000000000000011111010010111000011111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111111000011000010111010010011010000001000000000000011111010010011000011111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111111000011000010111110010011010000001000000000000010111010010011000011111110') := 1;
        pkBNBinaryRepresentation.tbBNBR('011111111000011000010111110010011110000001000000000000010011010010011000011111110') := 1;
        */
-- Ctrl
/*
pkBNBinaryRepresentation.tbBNBR('000000000100000000110101111110001001111101111110000000110101001110101101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100000000110110001110010000110000000111110011111111011111110001110110000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100000000110110001110010000110000000111110111111110011111110001110110000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100000000110110001110010001110000000111110011111111011111110001110010000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100000000110110001110010001110000001111110011111111011111110001110000000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100001000110101111110001001111101111100000000110101001110101101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100001000110101111110001101111101111100000000110001001110101101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100010000110010000111010000100000000111110011111111011111110000111110010') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100010000110010000111010000100000000111110011111111011111110001111110000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100010000110110000110010000100000000111110011111111011111110001111110000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000100010000110110001110010000100000000111110011111111011111110001110110000') := 1;
pkBNBinaryRepresentation.tbBNBR('000000000101111111100001101101001111101101111100000100100000000101001101100001100') := 1;
pkBNBinaryRepresentation.tbBNBR('000001100100111101110111111100001101100101101000000100000000000110111101100001100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000011101001111000000011111001111111101111101000011101001011000000000000000010') := 1;
pkBNBinaryRepresentation.tbBNBR('001000011101001111000000011111001111111101111101000011101001011000000001000000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001000011101001111000000011111011111111001111101000011101001011000000000000000010') := 1;
pkBNBinaryRepresentation.tbBNBR('001000011101001111000000011111011111111001111101000011101001011000000001000000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001011000000011111001111111101111001000011111001011000000000000000010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001111000000000111001111111101111001000001101001011001001001001000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001111000000000111001111111101111001000011101001011001000001001000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001111000000001111001111111101111001000011101001011001000001000000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001111000000001111011111111001111001000011101001011001000001000000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001111000000011111001111111101111001000011101001011000000000000000010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001111000000011111011111111001111001000011101001011000000000000000010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101001111000000011111011111111001111001000011101001011000000001000000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001001011101101111000000000101001111111101111001000001101001011001001001001000000') := 1;
pkBNBinaryRepresentation.tbBNBR('001001100101111111000001100101011111101001110000000000000001000101001100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001110101111111000001100101011111101001110000000000000001000001001100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001110101111111000001100101011111101001110000000100000000000001001100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('001101010101111111000001000001001000101101111000000000101101011001101000101101010') := 1;
pkBNBinaryRepresentation.tbBNBR('001101010101111111000001000001001010101101111000000000101101011001001000101101010') := 1;
pkBNBinaryRepresentation.tbBNBR('001101011101111111000001000001001010101101111000000000101101011001001000001101010') := 1;
pkBNBinaryRepresentation.tbBNBR('001101011101111111000001000001001011101101111000000000101101011001001000001001010') := 1;
pkBNBinaryRepresentation.tbBNBR('001101011101111111000001010001001010101101111000000000101101011000001000001101010') := 1;
pkBNBinaryRepresentation.tbBNBR('001101111101111111000001000001001011101101111000000000001101011001001000001001010') := 1;
pkBNBinaryRepresentation.tbBNBR('010000000000000000110101111110001001111101111110000000110101001110101101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('010000000000000000110110001110010001110000001111110011111111011111110001110000000') := 1;
pkBNBinaryRepresentation.tbBNBR('010000000000000000110111111110001000110101111110000000110101001110101101110101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010000000000000000110111111110001001110101111110000000110101001110101101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('010000001000000000110110001110010001110000001111110011111111011111110001010000000') := 1;
pkBNBinaryRepresentation.tbBNBR('010000100000000100110100111110000100111101111111100111000000000110100100110100110') := 1;
pkBNBinaryRepresentation.tbBNBR('010001000000000000110111111110001001110101101010000000110101001110111101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('010001000000000000110111111110001001110101111010000000110101001110101101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('010001000000001000110111111110001000110101101000000000110101001110111101110101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010001000000001000110111111110001001110101101000000000110101001110111101110001000') := 1;
pkBNBinaryRepresentation.tbBNBR('010101000000001000110101111010001000111101111000000000110101001110101101110101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010101000000001000110111111010001000110101101000000000110101001110111101110101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010101000000001000110111111010001000110101111000000000110101001110101101110101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010101000000101000110101111000001000111101111000000000110101001110101101110101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011000000000000000010000000111000000111101110111100100111100000111101100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000000000000000010000000111000000111101110111100110111100000111100100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000010111011111111000111111010111001000010000000000001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000110111000111111100111111110111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000110111010111111000111111110111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000110111010111111000111111110111000000010000000000001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000110111011111111000111111010111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000110111011111111000111111010111000000010000000000001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000110111011111111001111111000111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011000111001000111000000110111011111111001111111000111000000010000000000001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011001111001000111000000110111011111111001111011000111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011001111001000111000000110111011111111001111011000111000000010000000000001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011010111001000111000000110111011111011000111111010111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011010111001000111000000110111011111011000111111010111000000010000000000001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011100111001000111000000110011000111111100111111110111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011100111001000111000000110011000111111101111111100111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011101111001000111000000110011000111111101111011100111000000000000000100001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000110010100110010000110011100110011110110000000000000000100011111110') := 1;
*/
-- 20190505 Sample Arabinose
/*pkBNBinaryRepresentation.tbBNBR('0110000001001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0110001000001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000001000110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111001000000110') := 1;*/

-- 20190730 Cancer samples
/*pkBNBinaryRepresentation.tbBNBR('0010010100000001110011100') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010100000001110011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010100000001110111100') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010101000001010110100') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010101000001110110100') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010110000001010010110') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010110000001010011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010111000001010010110') := 1;
pkBNBinaryRepresentation.tbBNBR('0010010111000001010110100') := 1;
pkBNBinaryRepresentation.tbBNBR('0010110101000001110100100') := 1;
pkBNBinaryRepresentation.tbBNBR('0011010110000000010011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0011010111000000010010110') := 1;
pkBNBinaryRepresentation.tbBNBR('0110000100000001110011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000100000000110001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000100000000110011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000110000000010011110') := 1;*/

-- 2019-08-12 Basal Machinery
/*
pkBNBinaryRepresentation.tbBNBR('0101000000110110100011010') := 1;
pkBNBinaryRepresentation.tbBNBR('0101000010110100000011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0101000010110110000011010') := 1;
pkBNBinaryRepresentation.tbBNBR('0101100000110110100001010') := 1;
pkBNBinaryRepresentation.tbBNBR('0101100000110110100101000') := 1;
pkBNBinaryRepresentation.tbBNBR('0110000000010001110011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0110000100000001110011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0110100000010001110101100') := 1;
pkBNBinaryRepresentation.tbBNBR('0110100100000001110101100') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000000010000110011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000000010100100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000010010100000011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000100000000110011110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100000010000110001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100000010000110101100') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100000010100100001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100000010110100001010') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100010010100000001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100010010110000001010') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100100000000110001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100100000000110101100') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100101000000110100100') := 1;
pkBNBinaryRepresentation.tbBNBR('0111100110000100000001110') := 1;
*/
-- IronSulfur
pkBNBinaryRepresentation.tbBNBR('000000101000100000111000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100000101000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100000101000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100100100000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100100100000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101101100000101000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101101100100100000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101110100000101000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101110100100100000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100000101000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100000101000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100100100000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100100100000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101000000000111000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101100000000101000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101100000000101000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101101000000101000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101110000000101000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101111000000101000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101111000000101000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000000001000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000000001000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000100000000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000100000000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101101000000001000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101110000000001000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101110000100000000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000000001000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000000001000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000100000000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000100000000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('011100001100000000001000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('011100001100000100000000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011100001100000100000000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('011110001100000000001000011100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011110001100000100000000011100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111001100000000001000011100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111001100000100000000011100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000000001000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000100000000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000100000000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('011100001100000100000000111100111110') := 1;
/* 2020-06-12 */
/*
pkBNBinaryRepresentation.tbBNBR('000000101000100000111000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100000101000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100000101000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100100100000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101100100100100000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101101100000101000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101101100100100000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101110100000101000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101110100100100000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100000101000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100000101000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100100100000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000101111100100100000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101000000000111000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101100000000101000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101100000000101000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101101000000101000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101110000000101000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101111000000101000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000101111000000101000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000000001000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000000001000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000100000000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101100000100000000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101101000000001000111101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101110000000001000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101110000100000000101100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000000001000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000000001000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000100000000101100101110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100101111000100000000101101101100') := 1;
pkBNBinaryRepresentation.tbBNBR('011100001100000000001000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('011100001100000100000000111100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011100001100000100000000111101111100') := 1;
pkBNBinaryRepresentation.tbBNBR('011110001100000000001000011100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011110001100000100000000011100111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111001100000000001000011100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111001100000100000000011100011110') := 1;
*/

-- 20190504 Sample InterMod

/*pkBNBinaryRepresentation.tbBNBR('0000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0000100011011100') := 1;
pkBNBinaryRepresentation.tbBNBR('0000101010001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0010101000001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0010101100001010') := 1;
pkBNBinaryRepresentation.tbBNBR('0011101100000010') := 1;
pkBNBinaryRepresentation.tbBNBR('0011101100010000') := 1;
pkBNBinaryRepresentation.tbBNBR('0100000011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('0100000011011100') := 1;
pkBNBinaryRepresentation.tbBNBR('0101000011010100') := 1;
pkBNBinaryRepresentation.tbBNBR('0101000111010000') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000001010100') := 1;
pkBNBinaryRepresentation.tbBNBR('0111000101010000') := 1;
pkBNBinaryRepresentation.tbBNBR('0111001100000010') := 1;
pkBNBinaryRepresentation.tbBNBR('0111001100010000') := 1;*/

-- 20190427 Sample Ctrl 2
/*
pkBNBinaryRepresentation.tbBNBR('
000000000 0  suma de filas = 0 => Padre
101111111 8
100000000 1    Segundo
101001110 5
101101110 6
101000000 2
101001000 3
101001100 4
101111110 7
') := 1;   => En vez de reducir | oprimizar el orden -> cual es el nodo que en la mayora de veces aparece como padre (1),...
*/

/*
pkBNBinaryRepresentation.tbBNBR('000000000101111111100000000101011110101001110101000000101001000101001100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000000100100000100110001100111011111111001100110000100000000000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000100001100110011100111011110110001100000000000100001000111011100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000100001100110011100111011111110001100000000000100001000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000100001100110011110111011110110001100000000000100001000110011100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000101001010100001000111011011111001011000000000111111011101001000111001010') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000101011111100011110111011111100001100000000000100001000100011100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000101011111100011111111011111100001100000000000100001000100011100100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000101011111100011111111011111100001110000000000100001000100001100100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000101111111100011110101011111100001110000000000100001000100001100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000101111111100011111101011111100001100000000000100001000100011100100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001000101111111100011111101011111100001110000000000100001000100001100100011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001100100001100110011100111011111110001100000000000000001000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001100101011111100011110111011111100001100000000000000001000100011100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001100101111111100001110101011110101001110000000000000001000100001100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001100101111111100001110101011111101001110000000000000001000100001100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001100101111111100011110101011111100001100000000000000001000100011100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('000001100101111111100011110101011111100001110000000000000001000100001100101011110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000000101111111000000000101001100101101110101000100101000000101101100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000000101111111000000000101001110101101110101000000101001000101001100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000000101111111000000000101001110101101110101000100101000000101001100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000000101111111000000000101011110101001110101000000101001000101001100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001000000101111111000000000101011110101001110101000100101000000101001100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001000101001010000001000111011011111001010000000000111111011101001000111011010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001000101001010000001000111011011111001011000000000111111011101001000111001010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001000101011010000001000111011011101001010000000000111111011101001000111011010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001000101111111000000000101011110101001110001000000101001000101001100101111110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101001010000001000111011011111001010000000000111111011001001000111011010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101001010000001010111011011111001010000000000111111011000001000111011010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101001010000001010111011011111001010000000010111111011000000000111011010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101001111000001010111011111111001111000000000101001010000001000101001110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101001111000001010111011111111001111000000010101001010000000000101001110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101011010000001010111011011101001010000000000111111011000001000111011010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101011010000001010111011011101001010000000010111111011000000000111011010') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101011111000001010111011111101001111000000000101001010000001000101001110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101011111000001010111011111101001111000000010101001010000000000101001110') := 1;
pkBNBinaryRepresentation.tbBNBR('001001010101111111000001010101011111101001111000000000101001010000001000101001110') := 1;
pkBNBinaryRepresentation.tbBNBR('001100100101101111000100100000000000111101111101100101000100000101101101101100100') := 1;
pkBNBinaryRepresentation.tbBNBR('001100100101101111000100100000000100111101111101100101000000000101101101101100100') := 1;
pkBNBinaryRepresentation.tbBNBR('010000100000000000110000100111011111111001100111000100010000000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('010000100000000100110000100111011111111001100111000100000000000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('010000100000000100110001100111011111111001100110000100000000000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('010001100000000100110001100111011111111001100010000100000000000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('010001100000001100110001100111011111111001100000000100000000000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('010001100000001100110011100111011111110001100000000000000001000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('010001100000001100110011100111011111110001100000000100000000000111011100111011110') := 1;
pkBNBinaryRepresentation.tbBNBR('010010100000000100110011100111011101010000100110010100000000000111111101111011100') := 1;
pkBNBinaryRepresentation.tbBNBR('010101011000101001110111011000001000110101011000000000111111011010101001000101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010111010000010000110111010010010000000000000010110010111111010010110000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('010111010000010000110111010010010000000000000010110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('010111010000110000110111010000010000000000000010110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('010111011000101000110111011000001000010101011000000000111111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010111011000101001110111011000001000010101011000000000111111011010101001000101000') := 1;
pkBNBinaryRepresentation.tbBNBR('010111011000101001110111011000001001010101011000000000111111011010101001000001000') := 1;
pkBNBinaryRepresentation.tbBNBR('010111011000101011110111011000001001010101011000000000111111011000101001000001000') := 1;
pkBNBinaryRepresentation.tbBNBR('011001000001000000000000000111011100111001100011000000111001000111111100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011001000001001000000000000111001100111101100001000000111001000111111100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011001000001001000000000000111001100111101100001000000111001000111111101111111100') := 1;
pkBNBinaryRepresentation.tbBNBR('011001000001001000000000000111011100111001100001000000111001000111111100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011101110001000110000000000011001110111101110011000110001000000001000100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011101110001000110000000000011001110111101111011000110001000000001000100111101110') := 1;
pkBNBinaryRepresentation.tbBNBR('011101110001000110000000100011001110111101111011000110000000000001000100111101110') := 1;
pkBNBinaryRepresentation.tbBNBR('011101111001000110000000100011001110111101111011000110000000000001000100011101110') := 1;
pkBNBinaryRepresentation.tbBNBR('011101111001000110000000100011001111111101111011000110000000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010100000010000000011101010011100000111111010011101000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010100000010000000011101010011100010111111010011100000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010100010010000000011100010011110010111111010010100000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010100010010000000011100010011110010111111011010100000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010100010010000000011101010011100010111111010010100000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010101000010000000011101010010100000111111010011101000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010101010010000000011101010010100000111111010010101000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010110010010000000010100000011110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010110010010000000010100010011110010111111011010100000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010110010010010000010000000011110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000000000010111010010010000010000000010110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000010000010111010010010000000000000010110010111111010010110000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000010000010111010010010000000000000010110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000100000010110010000000000010100000011110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000100000010110010000000000010100010011110010111111011010100000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111010000110000010111010000010000000000000010110010111111011010110000111111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111011000000000010111011010001000010101011010000000111111011010101000010101010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111011000100000010111010000000000010101000010100000111111011010111000011111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111011000101000010111011000001000010101011000000000111111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111110000000000010111010010000000010101010010100000011111010010101000111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111110001000110000000000011001110011101110011000110001000000001000100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111110001001000000001000011011110011001110000000000011001000011001100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111110001001100000000000011011110011001110001000000001001000011001100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111110001001100000001000011011110011001110000000000001001000011001100111111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010101011010001000011101011010000000011111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111010010000000010101000010100000011111011010111000011111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111010010000000010101010010100000011111010010101000011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111010010000000010101010010100000011111011010101000011111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111010010001000010101000010000000011111010010111000011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111010010001000010101000010000000011111011010111000011111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111010010001000010101010010000000011111010010101000011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111010010011000010001000010000000011111011010111000011111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111011010001000010101011010000000011111011010101000010101010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111011010001000010101011010000000011111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000000000010111110010001000010101000010000000010111010010111000011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000001000010101011010001000011101011000000000011111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000100000010111010000000000010101000010100000011111011010111000011111010') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000101000010101011000000000011101011000100000011111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000101000010101011000001000011101011000000000011111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000101000010111011000000000010101011000100000011111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111000101000010111011000001000010101011000000000011111011010101001010101000') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001000110000000000011001110011101110011000110001000000001000100011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001000110000000000011001110011101110011000110001000010001000000011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001000110000000000011011111011001111011000110001000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001000110000000100011001111011101111011000110000000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001000110000000100011011111011001111011000110000000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001000110000000110011011111011001110011000110000000000000000100011011110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001000110000000110011011111011001111011000110000000000000000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001100000000000011001110011101110001000100001000000011001100011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001100000000000011011110011001110001000000001001000011001100011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001100000000000011011110011001110001000100001000000011001100011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000000011001110011101110001000100001000000001001100011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000000011001110011101110001000110001000000001000100011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000000011001110011101110001000110001000010001000000011111110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000000011001111011101111001000110001000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000000011011111011001111001000110001000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000100011001111011101111001000110000000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000100011011111011001110001000110000000000001000100011011110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000100011011111011001111001000100000000000001001100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000100011011111011001111001000110000000000001000100011001110') := 1;
pkBNBinaryRepresentation.tbBNBR('011111111001001110000000110011011111011001110001000110000000000000000100011011110') := 1;
*/

    END loadOptimalNetworks;
    ----------------------------------------------------------------------------
    PROCEDURE calculateAvarageOfNetwork IS
        idx binary_integer;
        idx2 binary_integer;
    BEGIN
         idx := pkBayesianMapper.tbAdjacencyMatrix.FIRST;
         LOOP
            EXIT WHEN idx IS NULL;
            idx2 := pkBayesianMapper.tbAdjacencyMatrix (idx).FIRST;
            LOOP
               EXIT WHEN idx2 IS NULL;
               IF (pkBayesianMapper.tbAdjacencyMatrix (idx)(idx2) = 1) THEN
                    tbWeightedAdjacencyMatrix(idx)(idx2) :=
                      NVL(tbWeightedAdjacencyMatrix(idx)(idx2),0) + 1;
                --NULL;
               END IF;
               idx2 := pkBayesianMapper.tbAdjacencyMatrix (idx).NEXT (idx2);
            END LOOP;
            idx := pkBayesianMapper.tbAdjacencyMatrix.NEXT (idx);
         END LOOP;
    END calculateAvarageOfNetwork;
-- getWeightedNetwork
    PROCEDURE getWeightedNetwork IS
    BEGIN
        -- Initialize Adjacency Matrix
        tbWeightedAdjacencyMatrix := pkBayesianMapper.ftbLoadMatrix (1);

        pkBNBinaryRepresentation.gsbIdxBNBR := pkBNBinaryRepresentation.tbBNBR.first;
        LOOP
            EXIT WHEN pkBNBinaryRepresentation.gsbIdxBNBR IS NULL;
            pkBayesianMapper.tbAdjacencyMatrix :=
                pkBNBinaryRepresentation.ftbLoadAdjMatrix(
                    pkBNBinaryRepresentation.gsbIdxBNBR
                    );
            -->
            calculateAvarageOfNetwork;
            --<
            pkBNBinaryRepresentation.gsbIdxBNBR := pkBNBinaryRepresentation.tbBNBR.next(
                                                    pkBNBinaryRepresentation.gsbIdxBNBR
                                                    );
        END LOOP;

    END getWeightedNetwork;
    -- getWeightGreaterEdge
    PROCEDURE getWeightGreaterEdge(inuNetworks in integer,
                                   onuI out integer,
                                   onuJ out integer,
                                   onuWeight out number)
    IS
      nuIdx                     INTEGER;
      nuIdx2                    INTEGER;
      nuCurWeight               number;
    BEGIN
    onuWeight := 0;
     -- Calculate Average
     nuIdx := tbWeightedAdjacencyMatrix.FIRST;
     LOOP
        EXIT WHEN nuIdx IS NULL;
        nuIdx2 := tbWeightedAdjacencyMatrix (nuIdx).FIRST;
        LOOP
           EXIT WHEN nuIdx2 IS NULL;
           nuCurWeight := tbWeightedAdjacencyMatrix (nuIdx) (nuIdx2) / inuNetworks;
           --DBMS_OUTPUT.put_line (nuIdx || ' ' || nuIdx2 || ' ' || nuCurWeight);
           IF (nuCurWeight > onuWeight AND nuCurWeight <> 1) THEN
             onuWeight := nuCurWeight;
             onuI := nuIdx;
             onuJ := nuIdx2;
           END IF;

           nuIdx2 := tbWeightedAdjacencyMatrix (nuIdx).NEXT (nuIdx2);
        END LOOP;
        nuIdx := tbWeightedAdjacencyMatrix.NEXT (nuIdx);
     END LOOP;
    END getWeightGreaterEdge;
    ----------------------------------------------------------------------------
    PROCEDURE fillIJMatrix (inuI in integer,
                           inuJ in integer,
                           ovcIJMatrix out varchar2)
    IS
    BEGIN
        ovcIJMatrix := '1';
        -- fill rows < I and rows > I
        IF (inuI>1) THEN
            ovcIJMatrix := LPAD(ovcIJMatrix,numNodes*(inuI-1)+1,'0');
        END IF;
        --dbms_output.put_line('I='||inuI||' (9*(inuI-1)+1)='||(9*(inuI-1)+1));
        --dbms_output.put_line('ovcIJMatrix='||to_char(ovcIJMatrix));

        -- fill columns < J and columns > J
        IF (inuJ>1) THEN
            ovcIJMatrix := LPAD(ovcIJMatrix,inuJ-1+Length(ovcIJMatrix),'0');
        END IF;
        --dbms_output.put_line('ovcIJMatrix='||to_char(ovcIJMatrix));

        IF (inuJ<numNodes) THEN
            ovcIJMatrix := RPAD(ovcIJMatrix,numNodes-inuJ+Length(ovcIJMatrix),'0');
        END IF;
        --dbms_output.put_line('ovcIJMatrix='||to_char(ovcIJMatrix));

        IF (inuI<numNodes) THEN
            ovcIJMatrix := RPAD(ovcIJMatrix,(numNodes-inuI)*numNodes+Length(ovcIJMatrix),'0');
        END IF;

    END fillIJMatrix;
    ----------------------------------------------------------------------------
    ----------------------------------------------------------------------------
    FUNCTION bin2dec (binval IN CHAR) RETURN NUMBER IS
      i                 NUMBER;
      digits            NUMBER;
      result            NUMBER := 0;
      current_digit     CHAR(1);
      current_digit_dec NUMBER;
    BEGIN
      digits := LENGTH(binval);
      FOR i IN 1..digits LOOP
         current_digit := SUBSTR(binval, i, 1);
         current_digit_dec := TO_NUMBER(current_digit);
         result := (result * 2) + current_digit_dec;
      END LOOP;
      RETURN result;
    END bin2dec;
    ----------------------------------------------------------------------------
    FUNCTION fvcBitXBitAnd(ivcNumber1 varchar2,ivcNumber2 varchar2)
    RETURN VARCHAR2
    IS
    BEGIN
        IF ( Length(ivcNumber1)=1 AND Length(ivcNumber2)=1 ) THEN
            RETURN  to_char(to_number(ivcNumber1)*
                            to_number(ivcNumber2) );
        ELSE
            RETURN fvcBitXBitAnd(substr(ivcNumber1, 1, Length(ivcNumber1)-1),
                                 substr(ivcNumber2, 1, Length(ivcNumber2)-1)) ||
                   to_char(to_number(substr(ivcNumber1, Length(ivcNumber1), 1))*
                           to_number(substr(ivcNumber2, Length(ivcNumber1), 1))  );
        END IF;
    END fvcBitXBitAnd;
    /*PROCEDURE BitXBitAnd(ivcNumber1 varchar2,ivcNumber2 varchar2,
                         ovcResult  out varchar2)
    IS
        idx         number := 1;
        ovcResult   varchar2(256);
    BEGIN
        LOOP
            EXIT WHEN idx > length(ivcNumber1) Or idx > length(ivcNumber2);
            ovcResult := ovcResult || to_number(substr(ivcNumber1, idx, 1))*
                                    to_number(substr(ivcNumber2, idx, 1));
            idx := idx + 1;
        END LOOP;
    END BitXBitAnd;*/
    ----------------------------------------------------------------------------
    -- Recorre las matrices de adyacencia y aplica bit*bit solo las coincidan
    -- con el bit I,J se incluyen en el nuevo conjunto
    FUNCTION getNewSetOfOptimalNets (ivcIJMatrix in out varchar2)
    RETURN pkBNBinaryRepresentation.tytbBNBR
    IS
        tbBNBR pkBNBinaryRepresentation.tytbBNBR;
    BEGIN
        tbBNBR.delete;
        pkBNBinaryRepresentation.gsbIdxBNBR := pkBNBinaryRepresentation.tbBNBR.first;
        LOOP
            EXIT WHEN pkBNBinaryRepresentation.gsbIdxBNBR IS NULL;

            --dbms_output.put_line(to_char(ivcIJMatrix));
            --dbms_output.put_line(to_char(pkBNBinaryRepresentation.gsbIdxBNBR));
            IF (fvcBitXBitAnd(ivcIJMatrix,
                              pkBNBinaryRepresentation.gsbIdxBNBR)
                                = ivcIJMatrix ) THEN
                tbBNBR(pkBNBinaryRepresentation.gsbIdxBNBR) := 1;
                --dbms_output.put_line(to_char(pkBNBinaryRepresentation.gsbIdxBNBR));
            END IF;

            pkBNBinaryRepresentation.gsbIdxBNBR :=
                pkBNBinaryRepresentation.tbBNBR.next(pkBNBinaryRepresentation.gsbIdxBNBR);
        END LOOP;
        RETURN tbBNBR;
    END getNewSetOfOptimalNets;
    ----------------------------------------------------------------------------
      PROCEDURE printAdjacencyMatrix(inuNetworks in integer)
      IS
          nuIdx                     INTEGER;
          nuIdx2                    INTEGER;
      BEGIN
         nuIdx := tbWeightedAdjacencyMatrix.FIRST;
         LOOP
            EXIT WHEN nuIdx IS NULL;
            nuIdx2 := tbWeightedAdjacencyMatrix (nuIdx).FIRST;
            LOOP
               EXIT WHEN nuIdx2 IS NULL;
               DBMS_OUTPUT.put_line (nuIdx || ' ' || nuIdx2 || ' '
                  || tbWeightedAdjacencyMatrix (nuIdx) (nuIdx2) / inuNetworks);
                  --|| tbWeightedAdjacencyMatrix (nuIdx) (nuIdx2) );
               nuIdx2 := tbWeightedAdjacencyMatrix (nuIdx).NEXT (nuIdx2);
            END LOOP;
            nuIdx := tbWeightedAdjacencyMatrix.NEXT (nuIdx);
         END LOOP;
      END printAdjacencyMatrix;
--------------------------------------------------------------------------------
BEGIN
    Initialize;
    -- load the initial set of optimal networks
    loadOptimalNetworks; -- ok  data loaded in pkBNBinaryRepresentation.tbBNBR
    LOOP
        -- get updated weights of the edges
        getWeightedNetwork; -- ok load tbWeightedAdjacencyMatrix
        -- get edge with the higher weight less that 1
        dbms_output.put_line('Networks='||pkBNBinaryRepresentation.tbBNBR.count);

        getWeightGreaterEdge(pkBNBinaryRepresentation.tbBNBR.count,
                            nuI,
                            nuJ,
                            nuWeight
                            ); -- Find Maximum Weight

        dbms_output.put_line('nuI='||nuI||' nuJ='||nuJ||' Weight='||nuWeight);
        EXIT WHEN nuWeight = 0; -- not exists more edges with weight less that 1
        -- filter optimal networks using edge with the higher weight less that 1
        fillIJMatrix(nuI,nuJ,pkBNBinaryRepresentation.gsbIdxBNBR);
        --dbms_output.put_line('fillIJMatrix -> '||pkBNBinaryRepresentation.gsbIdxBNBR);
        --fillIJMatrix(8,6,pkBNBinaryRepresentation.gsbIdxBNBR);
        --dbms_output.put_line(pkBNBinaryRepresentation.gsbIdxBNBR);

        --dbms_output.put_line('Start getNewSetOfOptimalNets');
        pkBNBinaryRepresentation.tbBNBR := getNewSetOfOptimalNets(
                                            pkBNBinaryRepresentation.gsbIdxBNBR);
        --dbms_output.put_line('Finish getNewSetOfOptimalNets');
        pkBNBinaryRepresentation.printBNBR;

    END LOOP;
    getWeightedNetwork;
--
    printAdjacencyMatrix(pkBNBinaryRepresentation.tbBNBR.count);
END;